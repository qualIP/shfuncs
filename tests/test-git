#!/usr/bin/env bash
# Copyright Â© 2021 qualIP Software
#
# This file is part of shfuncs:
#
#     https://github.com/qualIP/shfuncs
#
# shfuncs is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3.0 of the License, or (at your option)
# any later version.
#
# shfuncs is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with shfuncs; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

#set -euo pipefail
set -e

# shellcheck disable=all
SHFUNCS_DIR=$(cd "$(dirname "${BASH_SOURCE[0]:-${(%):-%x}}")/.." && pwd)
. "$SHFUNCS_DIR/func-test.sh"
. "$SHFUNCS_DIR/func-git.sh"
. "$SHFUNCS_DIR/func-cmd.sh"

TEST_TMP_DIR="$SHFUNCS_DIR/test.TEST_TMP_DIR.$$.tmp"
rm -Rf "$TEST_TMP_DIR"

mkdir "$TEST_TMP_DIR"
mkdir "$TEST_TMP_DIR/a"
pushd "$TEST_TMP_DIR/a" > /dev/null
git init
test_case test_git_changeset
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-notpushed"
test_assert_rc 0 test_git_changeset
test_assert_rc 0 test_git_changeset --branch-not-pushed-ok
test_assert_rc 1 test_git_changeset --branch-not-pushed-fail
echo 1 > a
(set -x ; cat a)
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-untracked-notpushed"
test_assert_rc 0 test_git_changeset
test_assert_rc 0 test_git_changeset --untracked-ok
test_assert_rc 1 test_git_changeset --untracked-fail
test_assert_rc 0 test_git_changeset --branch-not-pushed-ok
test_assert_rc 1 test_git_changeset --branch-not-pushed-fail
git add a
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "dirty"
test_assert_rc 1 test_git_changeset
git commit -m a1 --no-gpg-sign
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-notpushed"
test_assert_rc 0 test_git_changeset
echo 2 > a
(set -x ; cat a)
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "dirty"
test_assert_rc 1 test_git_changeset
git worktree add ../b
cd ../b
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-notpushed"
test_assert_rc 0 test_git_changeset
cd ../a

test_case git_dir
test_assert_equal "$(git_dir)" ".git"
test_assert_equal "$(GIT_DIR=$(pwd)/.git git_dir)" "$(pwd)/.git"
mkdir sub
test_assert_equal "$(cd sub && git_dir)" "$TEST_TMP_DIR/a/.git"
test_assert_equal "$(cd ../b && git_dir)" "$TEST_TMP_DIR/a/.git/worktrees/b"

test_case git_dir
test_assert_equal "$(git_path "$GIT_MERGE_HEAD_FILE")" ".git/MERGE_HEAD"
test_assert_equal "$(GIT_DIR=$(pwd)/.git git_path "$GIT_MERGE_HEAD_FILE")" "$(pwd)/.git/MERGE_HEAD"

test_case git_toplevel
test_assert_equal "$(git_toplevel)" "$TEST_TMP_DIR/a"
#mkdir sub
test_assert_equal "$(cd sub && git_toplevel)" "$TEST_TMP_DIR/a"
test_assert_equal "$(cd ../b && git_toplevel)" "$TEST_TMP_DIR/b"

test_case git_state
test_assert_equal "$(git_state)" ""
git bisect start
test_assert_equal "$(git_state)" "bisect"
git bisect reset
test_assert_equal "$(git_state)" ""

popd > /dev/null

rm -Rf "$TEST_TMP_DIR"
unset TEST_TMP_DIR
