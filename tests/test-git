#!/usr/bin/env bash
# Copyright Â© 2021 qualIP Software
#
# This file is part of shfuncs:
#
#     https://github.com/qualIP/shfuncs
#
# shfuncs is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3.0 of the License, or (at your option)
# any later version.
#
# shfuncs is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with shfuncs; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

#set -euo pipefail
set -e

# shellcheck disable=all
SHFUNCS_DIR=$(cd "$(dirname "${BASH_SOURCE[0]:-${(%):-%x}}")/.." && pwd)
. "$SHFUNCS_DIR/func-test.sh"
. "$SHFUNCS_DIR/func-git.sh"
. "$SHFUNCS_DIR/func-cmd.sh"

TEST_TMP_DIR="$SHFUNCS_DIR/test.TEST_TMP_DIR.$$.tmp"
rm -Rf "$TEST_TMP_DIR"

mkdir "$TEST_TMP_DIR"
mkdir "$TEST_TMP_DIR/a"
pushd "$TEST_TMP_DIR/a" > /dev/null
git init
test_case test_git_changeset
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-notpushed"
test_assert_rc 0 test_git_changeset
test_assert_rc 0 test_git_changeset --branch-not-pushed-ok
test_assert_rc 1 test_git_changeset --branch-not-pushed-fail
echo 1 > a
(set -x ; cat a)
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-untracked-notpushed"
test_assert_rc 0 test_git_changeset
test_assert_rc 0 test_git_changeset --untracked-ok
test_assert_rc 1 test_git_changeset --untracked-fail
test_assert_rc 0 test_git_changeset --branch-not-pushed-ok
test_assert_rc 1 test_git_changeset --branch-not-pushed-fail
git add a
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "dirty"
test_assert_rc 1 test_git_changeset
git commit -m a1 --no-gpg-sign
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-notpushed"
test_assert_rc 0 test_git_changeset
echo 2 > a
(set -x ; cat a)
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "dirty"
test_assert_rc 1 test_git_changeset
git worktree add ../b
cd ../b
git_eval_changeset_state
test_assert_equal "$(git_changeset_state_cached)" "clean-notpushed"
test_assert_rc 0 test_git_changeset
cd ../a

test_case git_dir
test_assert_equal "$(git_dir)" ".git"
test_assert_equal "$(GIT_DIR=$(pwd)/.git git_dir)" "$(pwd)/.git"
mkdir sub
test_assert_equal "$(cd sub && git_dir)" "$TEST_TMP_DIR/a/.git"
test_assert_equal "$(cd ../b && git_dir)" "$TEST_TMP_DIR/a/.git/worktrees/b"

test_case git_dir
test_assert_equal "$(git_path "$GIT_MERGE_HEAD_FILE")" ".git/MERGE_HEAD"
test_assert_equal "$(GIT_DIR=$(pwd)/.git git_path "$GIT_MERGE_HEAD_FILE")" "$(pwd)/.git/MERGE_HEAD"

test_case git_toplevel
test_assert_equal "$(git_toplevel)" "$TEST_TMP_DIR/a"
#mkdir sub
test_assert_equal "$(cd sub && git_toplevel)" "$TEST_TMP_DIR/a"
test_assert_equal "$(cd ../b && git_toplevel)" "$TEST_TMP_DIR/b"

test_case git_state
test_assert_equal "$(git_state)" ""
git bisect start
test_assert_equal "$(git_state)" "bisect"
git bisect reset
test_assert_equal "$(git_state)" ""

test_case git_state-hook
git bisect start
test_assert_equal "$(git_state)" "bisect"
echoA() { echo A ; }
echoB() { echo B ; }
hook_add git_state echoA
hook_add git_state echoB
test_assert_equal "$(git_state)" "bisect"
git bisect reset
test_assert_equal "$(git_state)" "A"
echoA() { true ; }
test_assert_equal "$(git_state)" "B"
echoB() { true ; }
test_assert_equal "$(git_state)" ""
# echoA and echoB are harmless; No need to reset the hooks.

test_case is_git_branch_name/assert_is_git_branch_name
test_assert_rc 0 is_git_branch_name main
test_assert_rc 0 assert_is_git_branch_name main
test_assert_rc 0 is_git_branch_name origin/main
test_assert_rc 0 assert_is_git_branch_name origin/main
test_assert_rc 0 is_git_branch_name main-old
test_assert_rc 0 assert_is_git_branch_name main-old
test_assert_rc 0 is_git_branch_name m.ain
test_assert_rc 0 assert_is_git_branch_name m.ain
test_assert_rc 0 is_git_branch_name m.ai_9n-old
test_assert_rc 0 assert_is_git_branch_name m.ai_9n-old
test_assert_rc 1 is_git_branch_name origin//main
test_assert_rc 1 assert_is_git_branch_name origin//main
test_assert_rc 1 is_git_branch_name origin//main
test_assert_rc 1 assert_is_git_branch_name origin//main
test_assert_rc 1 is_git_branch_name /main
test_assert_rc 1 assert_is_git_branch_name /main
test_assert_rc 1 is_git_branch_name -main
test_assert_rc 1 assert_is_git_branch_name -main
test_assert_rc 1 is_git_branch_name m%ain
test_assert_rc 1 assert_is_git_branch_name m%ain
test_assert_rc 1 is_git_branch_name m..ain
test_assert_rc 1 assert_is_git_branch_name m..ain
test_assert_rc 1 is_git_branch_name "m .ain"
test_assert_rc 1 assert_is_git_branch_name "m .ain"

test_case git_branch/git_effective_branch
test_assert_equal "$(git_branch)" "main"
test_assert_equal "$(git_effective_branch)" "main"
test_step checkout-A
git checkout -b A
test_assert_equal "$(git_branch)" "A"
test_assert_equal "$(git_effective_branch)" "A"
echo 3 > a
git add a
test_assert_equal "$(git_branch)" "A"
test_assert_equal "$(git_effective_branch)" "A"
git commit -m 3 --no-gpg-sign
test_step bisect
git bisect start
test_assert_equal "$(git_branch)" "A"
test_assert_equal "$(git_effective_branch)" "A"
git checkout HEAD~1
test_assert_equal "$(git_branch)" ""
test_assert_equal "$(git_effective_branch)" "A"
git bisect reset
test_assert_equal "$(git_branch)" "A"
test_assert_equal "$(git_effective_branch)" "A"
test_step checkout-B
git checkout -b B main
test_assert_equal "$(git_branch)" "B"
test_assert_equal "$(git_effective_branch)" "B"
echo 4 > a
git add a
git commit -m 4 --no-gpg-sign
test_step rebase-A
test_assert_rc 1 git rebase A
test_assert_equal "$(git_branch)" ""
test_assert_equal "$(git_effective_branch)" "B"
git add a
git commit -m M --no-gpg-sign
test_assert_equal "$(git_branch)" ""
test_assert_equal "$(git_effective_branch)" "B"
git rebase --continue
test_assert_equal "$(git_branch)" "B"
test_assert_equal "$(git_effective_branch)" "B"
git checkout main

test_case git_upstream_branch
test_assert_equal "$(git_upstream_branch)" ""
if false ; then
    # TODO fatal: ambiguous argument '@{u}': unknown revision or path not in the working tree.
    git remote add remote1 git@github.com:dummy.git
    git checkout A
    test_assert_equal "$(git_upstream_branch)" ""
    # git branch --set-upstream-to=remote1 otherA
    git config branch.A.remote remote1
    git config branch.A.merge refs/heads/otherA
    test_assert_equal "$(git_upstream_branch)" "remote1/otherA"
fi

test_case git_branch_exists
test_assert_rc 0 git_branch_exists A
test_assert_rc 1 git_branch_exists notabranch
test_assert_rc 1 git_branch_exists HEAD

test_case git_tag_exists
test_assert_rc 1 git_tag_exists T
git tag T A
test_assert_rc 0 git_tag_exists T
test_assert_rc 1 git_tag_exists notatag
test_assert_rc 1 git_tag_exists HEAD
test_assert_rc 1 git_tag_exists A

# TODO git_remote_branch_exists

test_case git_ref_type
git remote add remote2 git@github.com:dummy.git
test_assert_equal "$(git_ref_type A)" "branch"
test_assert_equal "$(git_ref_type T)" "tag"
# TODO test_assert_equal "$(git_ref_type remote2/main)" "remote"
test_assert_equal "$(git_ref_type "$(git rev-parse HEAD)")" "hash"
test_assert_rc 1 git_ref_type notabranch
test_assert_rc 1 git_ref_type deaddeadbeef
test_assert_rc 1 git_ref_type remote2/main

popd > /dev/null

rm -Rf "$TEST_TMP_DIR"
unset TEST_TMP_DIR
